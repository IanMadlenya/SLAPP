--- Agent.py	(original)
+++ Agent.py	(refactored)
@@ -41,8 +41,8 @@
         self.yPos = yPos
         self.yPos0=yPos
         self.deltaAtt=0
-        print "agent", self.agType, "#", self.number, \
-     	      "has been created at", self.xPos, ",", self.yPos
+        print("agent", self.agType, "#", self.number, \
+     	      "has been created at", self.xPos, ",", self.yPos)
 
         # turtle behavior
         self.speed(0)
@@ -101,9 +101,9 @@
     # asking well
     def askWell(self,**d):
         self.lastExecutedMethod=self.askWell
-        print
-        print "I'm %s agent %d: " % (self.agType,self.number),
-        print "I'm asking well!"
+        print()
+        print("I'm %s agent %d: " % (self.agType,self.number), end=' ')
+        print("I'm asking well!")
         add=1.0
         self.nMethodsAttention+=1
         self.tickAttention = (self.tickAttention*(self.nMethodsAttention-1) \
@@ -115,8 +115,8 @@
     # fidgeting
     def fidget(self,**d):
         self.lastExecutedMethod=self.fidget
-        print "I'm %s agent %d: " % (self.agType,self.number),
-        print "I'm fidgeting"
+        print("I'm %s agent %d: " % (self.agType,self.number), end=' ')
+        print("I'm fidgeting")
         add=random.random()*0.3+0.7
         self.nMethodsAttention+=1
         self.tickAttention = (self.tickAttention*(self.nMethodsAttention-1) \
@@ -126,8 +126,8 @@
     # shaking
     def shake(self,**d):
         self.lastExecutedMethod=self.shake
-        print "I'm %s agent %d: " % (self.agType,self.number),
-        print "I'm shaking"
+        print("I'm %s agent %d: " % (self.agType,self.number), end=' ')
+        print("I'm shaking")
         if self.agType == "greenPupil":
             add=random.random()*0.3+0.6
         else: add=random.random()*0.4+0.4
@@ -146,8 +146,8 @@
     # twisting
     def twist(self,**d):
         self.lastExecutedMethod=self.twist
-        print "I'm %s agent %d: " % (self.agType,self.number),
-        print "I'm twisting"
+        print("I'm %s agent %d: " % (self.agType,self.number), end=' ')
+        print("I'm twisting")
         add=random.random()*0.3
         self.nMethodsAttention+=1
         self.tickAttention = (self.tickAttention*(self.nMethodsAttention-1) \
@@ -166,8 +166,8 @@
     # paying attention
     def payAttention(self,**d):
         self.lastExecutedMethod=self.payAttention
-        print "I'm %s agent %d: " % (self.agType,self.number),
-        print "I'm paying attention"
+        print("I'm %s agent %d: " % (self.agType,self.number), end=' ')
+        print("I'm paying attention")
         add=1.0
         self.nMethodsAttention+=1
         self.tickAttention = (self.tickAttention*(self.nMethodsAttention-1) \
@@ -177,8 +177,8 @@
     # attracting attention teacher well
     def attractTeacherAttentionWell(self,**d):
         self.lastExecutedMethod=self.attractTeacherAttentionWell
-        print "I'm %s agent %d: " % (self.agType,self.number),
-        print "I'm attracting Teacher attention well"
+        print("I'm %s agent %d: " % (self.agType,self.number), end=' ')
+        print("I'm attracting Teacher attention well")
 
         # not relevant for attention
 
@@ -188,8 +188,8 @@
     # attracting attention teacher not well
     def attractTeacherAttentionNotWell(self,**d):
         self.lastExecutedMethod=self.attractTeacherAttentionNotWell
-        print "I'm %s agent %d: " % (self.agType,self.number),
-        print "I'm attracting Teacher attention not well"
+        print("I'm %s agent %d: " % (self.agType,self.number), end=' ')
+        print("I'm attracting Teacher attention not well")
 
         # not relevant for attention
 
@@ -201,8 +201,8 @@
     # attention elsewhere
     def attElsewhere(self,**d):
         self.lastExecutedMethod=self.attElsewhere
-        print "I'm %s agent %d: " % (self.agType,self.number),
-        print "and I'm distracted"
+        print("I'm %s agent %d: " % (self.agType,self.number), end=' ')
+        print("and I'm distracted")
         add=random.random()*0.2
         self.nMethodsAttention+=1
         self.tickAttention = (self.tickAttention*(self.nMethodsAttention-1) \
@@ -215,8 +215,8 @@
     # sitting down not well
     def sitDownNotWell(self,**d):
         self.lastExecutedMethod=self.sitDownNotWell
-        print "I'm %s agent %d: " % (self.agType,self.number),
-        print "I'm sitting down not well"
+        print("I'm %s agent %d: " % (self.agType,self.number), end=' ')
+        print("I'm sitting down not well")
 
         # not relevant for attention
 
@@ -228,8 +228,8 @@
     # sitting down well
     def sitDownWell(self,**d):
         self.lastExecutedMethod=self.sitDownWell
-        print "I'm %s agent %d: " % (self.agType,self.number),
-        print "I'm sitting down well"
+        print("I'm %s agent %d: " % (self.agType,self.number), end=' ')
+        print("I'm sitting down well")
 
         # not relevant for attention
 
@@ -241,8 +241,8 @@
     # standing up
     def standUp(self,**d):
         self.lastExecutedMethod=self.standUp
-        print "I'm %s agent %d: " % (self.agType,self.number),
-        print "I'm standing up"
+        print("I'm %s agent %d: " % (self.agType,self.number), end=' ')
+        print("I'm standing up")
 
         # not relevant for attention
 
@@ -254,8 +254,8 @@
     # turning back
     def turnBack(self,**d):
         self.lastExecutedMethod=self.turnBack
-        print "I'm %s agent %d: " % (self.agType,self.number),
-        print "I'm turning back"
+        print("I'm %s agent %d: " % (self.agType,self.number), end=' ')
+        print("I'm turning back")
 
         # not relevant for attention
 
@@ -267,8 +267,8 @@
     # move to teacher desk
     def moveToTeacherDesk(self,**d):
         self.lastExecutedMethod=self.moveToTeacherDesk
-        print "I'm %s agent %d: " % (self.agType,self.number),
-        print "going to teacher desk"
+        print("I'm %s agent %d: " % (self.agType,self.number), end=' ')
+        print("going to teacher desk")
 
         # not relevant for attention
 
@@ -280,8 +280,8 @@
     # move to blackboard
     def moveToBlackboard(self,**d):
         self.lastExecutedMethod=self.moveToBlackboard
-        print "I'm %s agent %d: " % (self.agType,self.number),
-        print "going to blackboard"
+        print("I'm %s agent %d: " % (self.agType,self.number), end=' ')
+        print("going to blackboard")
 
         # not relevant for attention
 
@@ -293,8 +293,8 @@
     # doing desk
     def doDesk(self,**d):
         self.lastExecutedMethod=self.doDesk
-        print "I'm %s agent %d: " % (self.agType,self.number),
-        print "I'm doing desk"
+        print("I'm %s agent %d: " % (self.agType,self.number), end=' ')
+        print("I'm doing desk")
 
         # not relevant for attention
 
@@ -303,8 +303,8 @@
     # doing work
     def doWork(self,**d):
         self.lastExecutedMethod=self.doWork
-        print "I'm %s agent %d: " % (self.agType,self.number),
-        print "I'm doing work"
+        print("I'm %s agent %d: " % (self.agType,self.number), end=' ')
+        print("I'm doing work")
 
         # not relevant for attention
 
@@ -313,8 +313,8 @@
     # doing metacognition
     def metaCognition(self,**d):
         self.lastExecutedMethod=self.metaCognition
-        print "I'm %s agent %d: " % (self.agType,self.number),
-        print "I'm doing metacognition!"
+        print("I'm %s agent %d: " % (self.agType,self.number), end=' ')
+        print("I'm doing metacognition!")
         add=1.0
         self.nMethodsAttention+=1
         self.tickAttention = (self.tickAttention*(self.nMethodsAttention-1) \
@@ -329,8 +329,8 @@
     # talking
     def talk(self,**d):
         self.lastExecutedMethod=self.talk
-        print "I'm %s agent %d: " % (self.agType,self.number),
-        print "I'm talking"
+        print("I'm %s agent %d: " % (self.agType,self.number), end=' ')
+        print("I'm talking")
         add=0.0
         self.nMethodsAttention+=1
         self.tickAttention = (self.tickAttention*(self.nMethodsAttention-1) \
@@ -342,8 +342,8 @@
     # talking to teacher well
     def talkTeacherWell(self,**d):
         self.lastExecutedMethod=self.talkTeacherWell
-        print "I'm %s agent %d: " % (self.agType,self.number),
-        print "I'm talking to the teacher well"
+        print("I'm %s agent %d: " % (self.agType,self.number), end=' ')
+        print("I'm talking to the teacher well")
         add=1.0
         self.nMethodsAttention+=1
         self.tickAttention = (self.tickAttention*(self.nMethodsAttention-1) \
@@ -355,8 +355,8 @@
     # talking to teacher bad
     def talkTeacherBad(self,**d):
         self.lastExecutedMethod=self.talkTeacherBad
-        print "I'm %s agent %d: " % (self.agType,self.number),
-        print "I'm talking to the teacher bad"
+        print("I'm %s agent %d: " % (self.agType,self.number), end=' ')
+        print("I'm talking to the teacher bad")
         add=1.0
         self.nMethodsAttention+=1
         self.tickAttention = (self.tickAttention*(self.nMethodsAttention-1) \
@@ -368,8 +368,8 @@
     # talking to teacher not well
     def talkTeacherNotWell(self,**d):
         self.lastExecutedMethod=self.talkTeacherNotWell
-        print "I'm %s agent %d: " % (self.agType,self.number),
-        print "I'm talking to the teacher not well"
+        print("I'm %s agent %d: " % (self.agType,self.number), end=' ')
+        print("I'm talking to the teacher not well")
         add=0.0
         self.nMethodsAttention+=1
         self.tickAttention = (self.tickAttention*(self.nMethodsAttention-1) \
@@ -381,8 +381,8 @@
     # talking to teacher wrong
     def talkTeacherWrong(self,**d):
         self.lastExecutedMethod=self.talkTeacherWrong
-        print "I'm %s agent %d: " % (self.agType,self.number),
-        print "I'm talking to the teacher wrong"
+        print("I'm %s agent %d: " % (self.agType,self.number), end=' ')
+        print("I'm talking to the teacher wrong")
         add=1.0
         self.nMethodsAttention+=1
         self.tickAttention = (self.tickAttention*(self.nMethodsAttention-1) \
@@ -394,8 +394,8 @@
     # checking Teacher and Talking closely
     def checkTeacherTalkClose(self,**d):
         self.lastExecutedMethod=self.checkTeacherTalkClose
-        print "I'm %s agent %d: " % (self.agType,self.number),
-        print "I'm checking teacher and talking closely"
+        print("I'm %s agent %d: " % (self.agType,self.number), end=' ')
+        print("I'm checking teacher and talking closely")
         if self.agType == "greenPupil":
             add=random.random()*0.2+0.4
         else: add=random.random()*0.2+0.3
@@ -411,8 +411,8 @@
     # talking closely
     def talkClose(self,**d):
         self.lastExecutedMethod=self.talkClose
-        print "I'm %s agent %d: " % (self.agType,self.number),
-        print "I'm talking closely"
+        print("I'm %s agent %d: " % (self.agType,self.number), end=' ')
+        print("I'm talking closely")
         if self.agType == "greenPupil":
             add=random.random()*0.3+0.6
         else: add=random.random()*0.4+0.4
@@ -428,8 +428,8 @@
     # answering (well)
     def answerWell(self,**d):
         self.lastExecutedMethod=self.answerWell
-        print "I'm %s agent %d: " % (self.agType,self.number),
-        print "answering well"
+        print("I'm %s agent %d: " % (self.agType,self.number), end=' ')
+        print("answering well")
         add=1.0
         self.nMethodsAttention+=1
         self.tickAttention = (self.tickAttention*(self.nMethodsAttention-1) \
@@ -441,8 +441,8 @@
     # answering (bad)
     def answerBad(self,**d):
         self.lastExecutedMethod=self.answerBad
-        print "I'm %s agent %d: " % (self.agType,self.number),
-        print "answering bad"
+        print("I'm %s agent %d: " % (self.agType,self.number), end=' ')
+        print("answering bad")
         add=1.0
         self.nMethodsAttention+=1
         self.tickAttention = (self.tickAttention*(self.nMethodsAttention-1) \
@@ -454,8 +454,8 @@
     # answering (not well)
     def answerNotWell(self,**d):
         self.lastExecutedMethod=self.answerNotWell
-        print "I'm %s agent %d: " % (self.agType,self.number),
-        print "answering not well"
+        print("I'm %s agent %d: " % (self.agType,self.number), end=' ')
+        print("answering not well")
         add=0.0
         self.nMethodsAttention+=1
         self.tickAttention = (self.tickAttention*(self.nMethodsAttention-1) \
@@ -467,8 +467,8 @@
     # answering (wrong)
     def answerWrong(self,**d):
         self.lastExecutedMethod=self.answerWrong
-        print "I'm %s agent %d: " % (self.agType,self.number),
-        print "answering wrong"
+        print("I'm %s agent %d: " % (self.agType,self.number), end=' ')
+        print("answering wrong")
         add=1.0
         self.nMethodsAttention+=1
         self.tickAttention = (self.tickAttention*(self.nMethodsAttention-1) \
@@ -480,8 +480,8 @@
     # answering Chorus
     def answerChorus(self,**d):
         self.lastExecutedMethod=self.answerChorus
-        print "I'm %s agent %d: " % (self.agType,self.number),
-        print "I'm answering chorus"
+        print("I'm %s agent %d: " % (self.agType,self.number), end=' ')
+        print("I'm answering chorus")
         add=0.0
         self.nMethodsAttention+=1
         self.tickAttention = (self.tickAttention*(self.nMethodsAttention-1) \
@@ -493,8 +493,8 @@
     # ask repeat
     def askRepeat(self,**d):
         self.lastExecutedMethod=self.askRepeat
-        print "I'm %s agent %d: " % (self.agType,self.number),
-        print "I'm asking repeat"
+        print("I'm %s agent %d: " % (self.agType,self.number), end=' ')
+        print("I'm asking repeat")
 
         # not relevant for attention
 
@@ -505,8 +505,8 @@
     # tidying
     def tidy(self,**d):
         self.lastExecutedMethod=self.tidy
-        print "I'm %s agent %d: " % (self.agType,self.number),
-        print "I'm tidying"
+        print("I'm %s agent %d: " % (self.agType,self.number), end=' ')
+        print("I'm tidying")
         add=random.random()*0.2+0.7
         self.nMethodsAttention+=1
         self.tickAttention = (self.tickAttention*(self.nMethodsAttention-1) \
@@ -520,8 +520,8 @@
     # untidying
     def untidy(self,**d):
         self.lastExecutedMethod=self.untidy
-        print "I'm %s agent %d: " % (self.agType,self.number),
-        print "I'm untidying"
+        print("I'm %s agent %d: " % (self.agType,self.number), end=' ')
+        print("I'm untidying")
         add=random.random()*0.2+0.7
         self.nMethodsAttention+=1
         self.tickAttention = (self.tickAttention*(self.nMethodsAttention-1) \
@@ -535,8 +535,8 @@
     # untidying-tidying
     def untidyTidy(self,**d):
         self.lastExecutedMethod=self.untidyTidy
-        print "I'm %s agent %d: " % (self.agType,self.number),
-        print "I'm untidying tidying"
+        print("I'm %s agent %d: " % (self.agType,self.number), end=' ')
+        print("I'm untidying tidying")
         add=random.random()*0.2+0.6
         self.nMethodsAttention+=1
         self.tickAttention = (self.tickAttention*(self.nMethodsAttention-1) \
@@ -549,8 +549,8 @@
     # borrowing
     def borrow(self,**d):
         self.lastExecutedMethod=self.borrow
-        print "I'm %s agent %d: " % (self.agType,self.number),
-        print "I'm borrowing"
+        print("I'm %s agent %d: " % (self.agType,self.number), end=' ')
+        print("I'm borrowing")
         add=random.random()*0.2+0.7
         self.nMethodsAttention+=1
         self.tickAttention = (self.tickAttention*(self.nMethodsAttention-1) \
@@ -564,8 +564,8 @@
     # wellness
     def wellness(self,**d):
         self.lastExecutedMethod=self.wellness
-        print "I'm %s agent %d: " % (self.agType,self.number),
-        print "Wellness"
+        print("I'm %s agent %d: " % (self.agType,self.number), end=' ')
+        print("Wellness")
         add=random.random()*0.2+0.7
         self.nMethodsAttention+=1
         self.tickAttention = (self.tickAttention*(self.nMethodsAttention-1) \
@@ -583,8 +583,8 @@
     # being praised
     def bePraised(self,**d):
         self.lastExecutedMethod=self.bePraised
-        print "I'm %s agent %d: " % (self.agType,self.number),
-        print "I'm being praised"
+        print("I'm %s agent %d: " % (self.agType,self.number), end=' ')
+        print("I'm being praised")
 
         # not relevant for attention
 
@@ -594,8 +594,8 @@
     # be quite bored
     def beQuiteBored(self,**d):
         self.lastExecutedMethod=self.beQuiteBored
-        print "I'm %s agent %d: " % (self.agType,self.number),
-        print "I'm quite bored"
+        print("I'm %s agent %d: " % (self.agType,self.number), end=' ')
+        print("I'm quite bored")
         add=random.random()*0.2+0.6
         self.nMethodsAttention+=1
         self.tickAttention = (self.tickAttention*(self.nMethodsAttention-1) \
@@ -608,8 +608,8 @@
     # being scolded
     def beScolded(self,**d):
         self.lastExecutedMethod=self.beScolded
-        print "I'm %s agent %d: " % (self.agType,self.number),
-        print "I'm being scolded"
+        print("I'm %s agent %d: " % (self.agType,self.number), end=' ')
+        print("I'm being scolded")
 
         # not relevant for attention
 
@@ -618,8 +618,8 @@
     # be very bored
     def beVeryBored(self,**d):
         self.lastExecutedMethod=self.beVeryBored
-        print "I'm %s agent %d: " % (self.agType,self.number),
-        print "I'm very bored"
+        print("I'm %s agent %d: " % (self.agType,self.number), end=' ')
+        print("I'm very bored")
         add=random.random()*0.2+0.3
         self.nMethodsAttention+=1
         self.tickAttention = (self.tickAttention*(self.nMethodsAttention-1) \
@@ -636,8 +636,8 @@
     # mumbling
     def mumble(self,**d):
         self.lastExecutedMethod=self.mumble
-        print "I'm %s agent %d: " % (self.agType,self.number),
-        print "I'm mumbling"
+        print("I'm %s agent %d: " % (self.agType,self.number), end=' ')
+        print("I'm mumbling")
 
         # not relevant for attention
 
@@ -646,8 +646,8 @@
     # growling
     def growl(self,**d):
         self.lastExecutedMethod=self.growl
-        print "I'm %s agent %d: " % (self.agType,self.number),
-        print "I'm growling"
+        print("I'm %s agent %d: " % (self.agType,self.number), end=' ')
+        print("I'm growling")
         if self.agType == "greenPupil":
             add=random.random()*0.2+0.5
         else: add=random.random()*0.2+0.4
@@ -661,8 +661,8 @@
     # teasing
     def tease(self,**d):
         self.lastExecutedMethod=self.tease
-        print "I'm %s agent %d: " % (self.agType,self.number),
-        print "I'm teasing"
+        print("I'm %s agent %d: " % (self.agType,self.number), end=' ')
+        print("I'm teasing")
 
         # not relevant for attention
 
@@ -672,8 +672,8 @@
     # helping classmate
     def helpClassmate(self,**d):
         self.lastExecutedMethod=self.helpClassmate
-        print "I'm %s agent %d: " % (self.agType,self.number),
-        print "I'm helping you"
+        print("I'm %s agent %d: " % (self.agType,self.number), end=' ')
+        print("I'm helping you")
 
         # not relevant for attention
 
@@ -685,8 +685,8 @@
     # checking teacher
     def checkTeacher(self,**d):
         self.lastExecutedMethod=self.checkTeacher
-        print "I'm %s agent %d: " % (self.agType,self.number),
-        print "I'm checking teacher"
+        print("I'm %s agent %d: " % (self.agType,self.number), end=' ')
+        print("I'm checking teacher")
 
         # not relevant for attention
 
@@ -697,8 +697,8 @@
     # checking classmate work
     def checkClassmateWork(self,**d):
         self.lastExecutedMethod=self.checkClassmateWork
-        print "I'm %s agent %d: " % (self.agType,self.number),
-        print "I'm checking classmate work"
+        print("I'm %s agent %d: " % (self.agType,self.number), end=' ')
+        print("I'm checking classmate work")
 
         # not relevant for attention
 
@@ -709,8 +709,8 @@
     # checking work
     def checkWork(self,**d):
         self.lastExecutedMethod=self.checkWork
-        print "I'm %s agent %d: " % (self.agType,self.number),
-        print "I'm checking work"
+        print("I'm %s agent %d: " % (self.agType,self.number), end=' ')
+        print("I'm checking work")
 
         # not relevant for attention
 
@@ -720,8 +720,8 @@
     # checking fast work
     def checkFastWork(self,**d):
         self.lastExecutedMethod=self.checkFastWork
-        print "I'm %s agent %d: " % (self.agType,self.number),
-        print "I'm checking fast work"
+        print("I'm %s agent %d: " % (self.agType,self.number), end=' ')
+        print("I'm checking fast work")
 
         # not relevant for attention
 
@@ -731,8 +731,8 @@
     # checking learning
     def checkLearning(self,**d):
         self.lastExecutedMethod=self.checkLearning
-        print "I'm %s agent %d: " % (self.agType,self.number),
-        print "I'm checking learning"
+        print("I'm %s agent %d: " % (self.agType,self.number), end=' ')
+        print("I'm checking learning")
 
         # not relevant for attention
 
