--- start.py	(original)
+++ start.py	(refactored)
@@ -12,7 +12,7 @@
 
 def runSLAPP():
  global start_pyDir
- print "SLAPP 1.6 build 20161005"
+ print("SLAPP 1.6 build 20161005")
  import os
 
 
@@ -36,16 +36,16 @@
     # the last caracter is eliminated in the given case (twice) to avoid
     # interferences between the control characters within the file and the
     # path definition
-    print "path and project = " + pathAndProject
-    confirm=raw_input("do you confirm? ([y]/n): ")
+    print("path and project = " + pathAndProject)
+    confirm=input("do you confirm? ([y]/n): ")
     if confirm == "y" or confirm == "Y" or confirm == "": found=True
     currentProject.close()
 
  if confirm == "y" or confirm == "Y" or confirm == "":
     project = pathAndProject
  else:
-    project = raw_input("Project name? ")
-    if not project in names1: print "Project " + project + " not found"
+    project = input("Project name? ")
+    if not project in names1: print("Project " + project + " not found")
     else:
         found=True
         project="./"+project
@@ -65,8 +65,8 @@
   #print common.graphicStatus
 
   common.IPython=tl.checkRunningIn()
-  if common.IPython: print "running in IPython"
-  else:              print "running in Python"
+  if common.IPython: print("running in IPython")
+  else:              print("running in Python")
 
   import ObserverSwarm as obs
 
@@ -82,7 +82,7 @@
                       # this choice can be useful when you build a new project
                       # and as an expert user you want to check the errors
                       # in a basic way
-  print "debug =",common.debug
+  print("debug =",common.debug)
 
   observerSwarm = obs.ObserverSwarm(project)
 
@@ -98,7 +98,7 @@
 
 
   if common.IPython:
-    print "End of the run! TO RUN AGAIN IN JUPYTER REMEMBER TO RESTART THE KERNEL"
+    print("End of the run! TO RUN AGAIN IN JUPYTER REMEMBER TO RESTART THE KERNEL")
 
 # running alone
 if __name__ == "__main__": runSLAPP()
